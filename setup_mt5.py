#!/usr/bin/env python3
"""
MT5 Integration Setup Script
===========================

This script helps you set up the MT5 integration with your XM trading account.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with XM credentials"""
    print("="*60)
    print("XM TRADING ACCOUNT SETUP")
    print("="*60)
    
    # Check if .env file already exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    print("\nPlease provide your XM trading account credentials:")
    
    # Get account number
    account_number = input("XM Account Number: ").strip()
    if not account_number:
        print("‚ùå Account number is required!")
        return
    
    # Get password
    password = input("XM Account Password: ").strip()
    if not password:
        print("‚ùå Password is required!")
        return
    
    # Get server type
    print("\nSelect your account type:")
    print("1. Demo Account (XMGlobal-Demo)")
    print("2. Live Account (XMGlobal-Live)")
    
    server_choice = input("Enter choice (1 or 2): ").strip()
    if server_choice == "1":
        server = "XMGlobal-Demo"
    elif server_choice == "2":
        server = "XMGlobal-Live"
        print("‚ö†Ô∏è  WARNING: You selected LIVE account!")
        confirm = input("Are you sure you want to use LIVE account? (y/N): ").lower()
        if confirm != 'y':
            print("Setup cancelled.")
            return
    else:
        print("‚ùå Invalid choice!")
        return
    
    # Get trading settings
    print("\nTrading Bot Settings:")
    
    account_size = input("Account Size (default: 10000): ").strip()
    if not account_size:
        account_size = "10000"
    
    risk_percent = input("Risk Per Trade % (default: 2.0): ").strip()
    if not risk_percent:
        risk_percent = "2.0"
    
    default_symbol = input("Default Symbol (default: EURUSD): ").strip()
    if not default_symbol:
        default_symbol = "EURUSD"
    
    default_timeframe = input("Default Timeframe (default: 1h): ").strip()
    if not default_timeframe:
        default_timeframe = "1h"
    
    # Create .env file
    env_content = f"""# XM Trading Account Credentials
# Generated by setup script

# XM Account Number
XM_ACCOUNT_NUMBER={account_number}

# XM Account Password
XM_PASSWORD={password}

# XM Server
XM_SERVER={server}

# Trading Bot Settings
ACCOUNT_SIZE={account_size}
RISK_PERCENT={risk_percent}
DEFAULT_SYMBOL={default_symbol}
DEFAULT_TIMEFRAME={default_timeframe}
AUTO_TRADE=false
CONTINUOUS_MONITORING=false
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        print("\n‚úÖ .env file created successfully!")
        print(f"   Account: {account_number}")
        print(f"   Server: {server}")
        print(f"   Default Symbol: {default_symbol}")
        print(f"   Default Timeframe: {default_timeframe}")
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return

def test_mt5_connection():
    """Test MT5 connection"""
    print("\n" + "="*60)
    print("TESTING MT5 CONNECTION")
    print("="*60)
    
    try:
        from mt5_connector import MT5Connector
        
        print("Connecting to XM account...")
        connector = MT5Connector()
        
        if connector.connect():
            print("‚úÖ Connection successful!")
            
            # Get account info
            summary = connector.get_account_summary()
            if summary:
                print(f"\nüìä Account Information:")
                print(f"   Login: {summary['login']}")
                print(f"   Server: {summary['server']}")
                print(f"   Balance: ${summary['balance']:.2f}")
                print(f"   Equity: ${summary['equity']:.2f}")
                print(f"   Free Margin: ${summary['margin_free']:.2f}")
            
            # Test symbol info
            symbol_info = connector.get_symbol_info("EURUSD")
            if symbol_info:
                print(f"\nüìà Symbol Information (EURUSD):")
                print(f"   Digits: {symbol_info['digits']}")
                print(f"   Spread: {symbol_info['spread']}")
                print(f"   Min Volume: {symbol_info['volume_min']}")
                print(f"   Max Volume: {symbol_info['volume_max']}")
            
            # Test historical data
            data = connector.get_historical_data("EURUSD", "1h", 100)
            if data is not None:
                print(f"\nüìä Historical Data Test:")
                print(f"   Data points: {len(data)}")
                print(f"   Date range: {data['Date'].min()} to {data['Date'].max()}")
            
            connector.disconnect()
            print("\n‚úÖ All tests passed! MT5 integration is working correctly.")
            
        else:
            print("‚ùå Connection failed!")
            print("Please check your credentials in the .env file.")
            
    except ImportError:
        print("‚ùå MT5 connector not found!")
        print("Please install the required dependencies:")
        print("   pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Error testing connection: {e}")

def install_dependencies():
    """Install required dependencies"""
    print("="*60)
    print("INSTALLING DEPENDENCIES")
    print("="*60)
    
    try:
        import subprocess
        import sys
        
        print("Installing required packages...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Dependencies installed successfully!")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error installing dependencies: {e}")
        print("Please install manually:")
        print("   pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def show_usage_examples():
    """Show usage examples"""
    print("\n" + "="*60)
    print("USAGE EXAMPLES")
    print("="*60)
    
    print("\nüìä Analysis Only (No Trading):")
    print("   python mt5_trading_bot.py EURUSD 1h 10000 2.0 false false")
    
    print("\nüéØ Single Analysis with Auto Trading:")
    print("   python mt5_trading_bot.py EURUSD 1h 10000 2.0 true false")
    
    print("\nüîÑ Continuous Monitoring (No Auto Trading):")
    print("   python mt5_trading_bot.py EURUSD 1h 10000 2.0 false true")
    
    print("\nü§ñ Full Auto Trading with Continuous Monitoring:")
    print("   python mt5_trading_bot.py EURUSD 1h 10000 2.0 true true")
    
    print("\nüìà Test MT5 Connection:")
    print("   python mt5_connector.py")
    
    print("\nüîß Test Trading Bot Analysis:")
    print("   python test_day_trading.py")

def main():
    """Main setup function"""
    print("MT5 INTEGRATION SETUP")
    print("====================")
    print("This script will help you set up the MT5 integration with XM account.")
    
    while True:
        print("\n" + "="*60)
        print("SETUP MENU")
        print("="*60)
        print("1. Create .env file with XM credentials")
        print("2. Install dependencies")
        print("3. Test MT5 connection")
        print("4. Show usage examples")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ").strip()
        
        if choice == "1":
            create_env_file()
        elif choice == "2":
            install_dependencies()
        elif choice == "3":
            test_mt5_connection()
        elif choice == "4":
            show_usage_examples()
        elif choice == "5":
            print("Setup completed!")
            break
        else:
            print("‚ùå Invalid choice! Please enter 1-5.")

if __name__ == "__main__":
    main() 